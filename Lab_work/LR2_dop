ДОПОЛНИТЕЛЬНОЕ ЗАДАНИЕ

Дополнительная задача 1: "Анализ логов сервера"
Описание задачи:
У вас есть файл server_logs.txt, который содержит логи веб-сервера. Каждая строка лога имеет следующий формат:

[дата] [время] [IP-адрес] [метод] [URL] [статус] [размер ответа]
Пример строки:
[2023-10-01] [12:34:56] [192.168.1.1] [GET] [/index.html] [200] [1024]

Задание:

Напишите программу, которая:

- Читает файл server_logs.txt.

- Используя регулярные выражения, извлекает данные из каждой строки лога.

Подсчитывает:

- Количество запросов с кодом статуса 200.

- Общий объём данных, переданных сервером (сумма всех размеров ответов).

- Количество уникальных IP-адресов.

- Сохраняет результаты в файл log_analysis.txt.

- Используя лямбда-функции, отсортируйте логи по дате и времени и выведите первые 10 записей.

Дополнительная задача 2: "Генератор отчётов"
Описание задачи:
У вас есть файл students.csv, который содержит данные о студентах в формате CSV:

Имя,Возраст,Средний балл
Иван,20,4.5
Мария,21,4.8
Петр,19,3.9

Задание:

Напишите программу, которая:

- Читает данные из файла students.csv.

- Используя модуль csv, преобразует данные в список словарей.

Создаёт модуль student_utils.py, который содержит функции:

- get_top_students(students, n) — возвращает список из n студентов с наивысшим средним баллом.

- get_average_age(students) — возвращает средний возраст студентов.

- filter_students_by_grade(students, min_grade) — возвращает список студентов, у которых средний балл выше min_grade.

- Используя лямбда-функции, отсортируйте студентов по возрасту и выведите результат.

- Сохраните результаты в файл report.txt.
